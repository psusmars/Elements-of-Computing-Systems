// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/1/RAM64.hdl

/**
 * Memory of 64 registers, each 16-bit wide.  
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM64[address(t)](t)
 *     Write: If load(t-1) then RAM64[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 */

CHIP RAM64 {

    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
	DMux8Way(in=load, a=DmuxOut1, b=DmuxOut2, c=DmuxOut3,
		d=DmuxOut4, e=DmuxOut5, f=DmuxOut6, g=DmuxOut7, h=DmuxOut8, sel[0..2]=address[0..2]);  

    RAM8(in=in, load=DmuxOut1, address[0..2]=address[3..5], out=outOfRAM1);
    RAM8(in=in, load=DmuxOut2, address[0..2]=address[3..5], out=outOfRAM2);
    RAM8(in=in, load=DmuxOut3, address[0..2]=address[3..5], out=outOfRAM3);
    RAM8(in=in, load=DmuxOut4, address[0..2]=address[3..5], out=outOfRAM4);
    RAM8(in=in, load=DmuxOut5, address[0..2]=address[3..5], out=outOfRAM5);
    RAM8(in=in, load=DmuxOut6, address[0..2]=address[3..5], out=outOfRAM6);
    RAM8(in=in, load=DmuxOut7, address[0..2]=address[3..5], out=outOfRAM7);
    RAM8(in=in, load=DmuxOut8, address[0..2]=address[3..5], out=outOfRAM8);

	Mux8Way16(a=outOfRAM1, b=outOfRAM2, c=outOfRAM3, d=outOfRAM4,
		e=outOfRAM5, f=outOfRAM6, g=outOfRAM7, h=outOfRAM8, sel=address[0..2], out=out);
}
