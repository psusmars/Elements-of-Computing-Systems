// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:

	//Zero or not the input of x and send it out via muxX2
	And16(a=x, b[0..15]=false, out=zerox);
	Mux16(a=x, b=zerox, sel=zx, out=muxX1);
	Not16(in=muxX1, out=xnot);
	Mux16(a=muxX1, b=xnot, sel=nx, out=muxX2);

	//Zero or not the input of y, send out muxY2
	And16(a=y, b[0..15]=false, out=zeroy);
	Mux16(a=y, b=zeroy, sel=zy, out=muxY1);
	Not16(in=muxY1, out=ynot);
	Mux16(a=muxY1, b=ynot, sel=ny, out=muxY2);
	
	//Do both f operations (add and and)
	And16(a=muxX2, b=muxY2, out=andf);
	Add16(a=muxX2, b=muxY2, out=addf);

	//Output either add or and
	Mux16(a=andf, b=addf, sel=f, out=out1);

	//Negate the output
	Not16(in=out1, out=notOut1);

	//Send out proper outputs
	Mux16(a=out1,b=notOut1,sel=no,out=out,out[0..7]=out3,out[8..15]=out4,out[15]=ng);
	Or8Way(in=out3, out=orOut1);
	Or8Way(in=out4, out=orOut2);
	Or(a=orOut1, b=orOut2, out=orOut3);
	Not(in=orOut3, out=zr);
	
}
