// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	PC(in=addressI, load=loadPC, inc=true, reset=reset, out[0..14]=pc, out[15]=nill);
	Mux16(a=instruction, b=ALUOut,  sel=instruction[15], out=instMuxOut); //make sure this is right
	Not(in=instruction[15], out=notBit15);
	Or(a=notBit15, b=instruction[5], out=loadA);
	And(a=instruction[15], b=instruction[4], out=loadD);
	And(a=instruction[15], b=instruction[3], out=writeM);
	ARegister(in=instMuxOut , load=loadA, out=addressI, out[0..14]=addressM, out=inAMMux);
	DRegister(in=ALUOut, load=loadD, out=DRegOut);
	ALU(x=DRegOut, y=AMMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
		f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=zeroed, ng=negative); //JUMP logic is when zr and ng are used
	
	//JUMP logic
	And(a=instruction[1], b=zeroed, out=equalToZeroJump);
	And(a=instruction[2], b=negative, out=negativeJump);
	And(a=instruction[0], b=positive, out=positiveJump);
	Or(a=negative, b=zeroed, out=notPositive);
	Not(in=notPositive, out=positive);
	Or(a=equalToZeroJump, b=negativeJump, out=firstOr);
	Or(a=positiveJump, b=firstOr, out=omgJUMP);
	And(a=omgJUMP, b=instruction[15], out=loadPC);

	Mux16(a=inAMMux, b=inM, sel=instruction[12], out=AMMuxOut);

}

